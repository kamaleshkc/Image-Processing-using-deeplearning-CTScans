% course work 
% Kamalesh K C   2439828

%loading all the data from matlab and leveling them. 
digitDatasetPath=fullfile("archive/");
imds=imageDatastore(digitDatasetPath,'IncludeSubfolders',true,'LabelSource','foldernames');

%The code randomly selects 20 images from the dataset and displays them 
% in a 4x5 grid using the subplot function.
figure;
perm =randperm(10000,20);
for i=1:20
    subplot(4,5,i)
    imshow(imds.Files{perm(i)});
end

%Splitting the dataset: The dataset is split into a training set and a validation
% set using the splitEachLabel function.


labelCount = countEachLabel(imds);
img = readimage(imds,1); size(img)


numTrainFiles = 750;
[imdsTrain,imdsValidation] = splitEachLabel(imds,numTrainFiles,'randomize');

%Defining the neural network architecture.
%The CNN model architecture is defined using the layers variable.

%Specifies the input size of the images (28x28 pixels with 1 channel for grayscale.
%convolution2dLayer: Applies a 3x3 filter to the input data with 8 filters in the first layer, 16 filters in the second layer,
% and 32 filters in the third layer.

%batchNormalizationLayer: Normalizes the activations of the previous layer to stabilize the training process.

%reluLayer: Applies the Rectified Linear Unit (ReLU) activation function.

%maxPooling2dLayer: Performs max-pooling with a 2x2 window and stride of 2 to reduce the spatial dimensions.

layers = [
imageInputLayer([64 64 1])
convolution2dLayer(3,8,'Padding','same')
batchNormalizationLayer
reluLayer
maxPooling2dLayer(2,'Stride',2)
convolution2dLayer(3,16,'Padding','same')
batchNormalizationLayer
reluLayer
maxPooling2dLayer(2,'Stride',2)
convolution2dLayer(3,32,'Padding','same')
batchNormalizationLayer
reluLayer
fullyConnectedLayer(6)
softmaxLayer
classificationLayer];

%Stochastic Gradient Descent with Momentum as the optimization algorithm.

options = trainingOptions('sgdm', ...
 'InitialLearnRate',0.01, ...
 'MaxEpochs',4, ...
 'Shuffle','every-epoch', ...
 'ValidationData',imdsValidation, ...
 'ValidationFrequency',30, ...
 'Verbose',false, ...
 'Plots','training-progress');

net = trainNetwork(imdsTrain,layers,options);

YPred = classify(net,imdsValidation);
YValidation = imdsValidation.Labels;
accuracy = sum(YPred == YValidation)/numel(YValidation);

plotconfusion(testTarget,testY);



% % Load the image you want to classify
% testImage = imread('path_to_your_test_image.jpg'); % Replace 'path_to_your_test_image.jpg' with the path to your image
% imshow(testImage);
% title('Test Image');
% 
% % Preprocess the image to match the input size expected by your network
% resizedImage = imresize(testImage, [128, 128]); % Adjust the size as per your network's input size
% grayImage = rgb2gray(resizedImage); % Convert to grayscale if needed
% preprocessedImage = im2single(grayImage); % Convert to single precision
% 
% % Classify the preprocessed image using your trained model
% predictedLabel = classify(net, preprocessedImage);
% 

% Display the classification result
disp(['Predicted Label: ', char(predictedLabel)]);




